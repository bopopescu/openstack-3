import ctypes
import os

from nova import exception
from nova.openstack.common import log as logging
from nova import utils
from nova.virt.libvirt import volume

LOG = logging.getLogger(__name__)



class POFSVolumeDriver(volume.LibvirtVolumeDriver):
    """ Class implements libvirt part of volume driver for file
    """
    def __init__(self, *args, **kwargs):
        """Create back-end to file and check connection"""
        super(POFSVolumeDriver, self).__init__(*args, **kwargs)

    def connect_volume(self, connection_info, mount_device):
        """Connect the volume. Returns xml for libvirt."""

        path = os.path.join(connection_info['data']['export'], connection_info['data']['name'])
        connection_info['data']['device_path'] = path
        conf = super(POFSVolumeDriver, self).connect_volume(connection_info,
                                                           mount_device)
        conf.source_type = 'file'
        conf.driver_format = "qcow2"
        return conf

    def disconnect_volume(self, connection_info, mount_device):
        """Disconnect the volume"""
        pass

    @staticmethod
    def get_hash_str(base_str):
        """returns string that represents hash of base_str (in a hex format)"""
        return str(ctypes.c_uint64(hash(base_str)).value)
